<?xml version="1.0" encoding="utf-8"?>
<topic id="fee6a616-6282-4419-a517-7c33c56158ee" revisionNumber="1">
  <developerOrientationDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      The library supports differnet method to connect to SSH server.
      It also has support to add a custom authentication method if needed. Method supported out of the box are :<newTerm>publickey</newTerm>, <newTerm>password</newTerm> and <newTerm>keyboard-interactive</newTerm>. There is also support for different events that can occure during authentication. For example: server can send an information that need to be presented to the user upon login, user's password is expired and new password could be provided to change user's password and others scenrios.
      
      By using <codeEntityReference>T:Renci.SshClient.ConnectionInfo</codeEntityReference> you can specify connection timeout, which in this case will wait 30 seconds while tying to connect to the server after which it will throw an exception if it did not connect.
           
    </introduction>

    <section>
      <title>Connect using password.</title>
      <content>
        <para>Following examples show how to connect using username and password combination.</para>
        <codeExample>
          <list class="ordered">
            <listItem>
              <para>Connecting using username to server's default port</para>
              <code language="cs">
                using (var client = new SshClient("host", "username", "password"))
                {
                client.Connect();
                client.Disconnect();
                }
              </code>
            </listItem>
            <listItem>
              <para>Connecting using username to server's port 1234</para>
              <code language="cs">
                using (var client = new SshClient("host", 1234, "username", "password"))
                {
                client.Connect();
                client.Disconnect();
                }
              </code>
            </listItem>
            <listItem>
              <para>
                This is similar to previouse example but it uses <codeEntityReference>T:Renci.SshClient.ConnectionInfo</codeEntityReference> objet to provide connection information.
              </para>
              <code language="cs">
                var connectionInfo = new PasswordConnectionInfo("host", "username", "password");
                using (var client = new SshClient(connectionInfo))
                {
                client.Connect();
                client.Disconnect();
                }
              </code>
            </listItem>
            <listItem>
              <para>Try to connect to the host within 30 seconds.</para>
              <code language="cs">
                var connectionInfo = new PasswordConnectionInfo("host", "username", "password");
                connectionInfo.Timeout = TimeSpan.FromSeconds(30);
                using (var client = new SshClient(connectionInfo))
                {
                client.Connect();
                client.Disconnect();
                }
              </code>
            </listItem>
          </list>
        </codeExample>
      </content>
    </section>

    <section>
      <title>Connect using private key file.</title>
      <content>
        <para>Following examples show how to connect using one or many private keys wich can be encrypted with passphrase.</para>
        <codeExample>
          <list class="ordered">
            <listItem>
              <para>Connecting using private key file without providing a passphrase</para>
              <code language="cs">
                using (var client = new SshClient("host", "username", new PrivateKeyFile(File.OpenRead(@"private.key"))))
                {
                client.Connect();
                client.Disconnect();
                }
              </code>
            </listItem>
            <listItem>
              <para>Connecting using private key file without providing a passphrase</para>
              <code language="cs">
                using (var client = new SshClient("host", "username", new PrivateKeyFile(File.OpenRead(@"private.key"))))
                {
                client.Connect();
                client.Disconnect();
                }
              </code>
            </listItem>
          </list>
        </codeExample>
      </content>
    </section>

    <section>
      <title>Connect using keyboar interactive method.</title>
      <content>
        <para>Examples of how to use keyboard interactive method to authenticate users.</para>
        <codeExample>
          <list class="ordered">
            <listItem>
              <para>Example description</para>
              <code language="cs">
              </code>
            </listItem>
          </list>
        </codeExample>
      </content>
    </section>

    <section>
      <title>Display server propmt to the user.</title>
      <content>
        <para>Description</para>
        <codeExample>
          <list class="ordered">
            <listItem>
              <para>Example description</para>
              <code language="cs">
              </code>
            </listItem>
          </list>
        </codeExample>
      </content>
    </section>

    <section>
      <title>Change user password when logging in.</title>
      <content>
        <para>Description</para>
        <codeExample>
          <list class="ordered">
            <listItem>
              <para>Example description</para>
              <code language="cs">
              </code>
            </listItem>
          </list>
        </codeExample>
      </content>
    </section>
    
    <relatedTopics>
      <relatedTopics>
        <codeEntityReference>T:Renci.SshClient.PrivateKeyConnectionInfo</codeEntityReference>
        <codeEntityReference>T:Renci.SshClient.PasswordConnectionInfo</codeEntityReference>
        <codeEntityReference>T:Renci.SshClient.SshClient</codeEntityReference>
        <codeEntityReference>M:Renci.SshClient.SshBaseClient.Connect</codeEntityReference>
      </relatedTopics>
    </relatedTopics>
  </developerOrientationDocument>
</topic>