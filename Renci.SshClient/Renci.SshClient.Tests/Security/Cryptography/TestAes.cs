using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Renci.SshClient.Tests.Security.Cryptography
{
    [TestClass]
    public class TestAes
    {
        [TestMethod]
        public void Test_AES_128_CBC_NoPadding()
        {
            var key = new byte[] { 0xfa, 0x49, 0x9d, 0xa5, 0x59, 0xc3, 0xcc, 0xa9, 0xc3, 0x0b, 0xcd, 0xba, 0x03, 0xbc, 0x97, 0xfc };
            var iv = new byte[] { 0x3a, 0x3f, 0x51, 0xb1, 0xba, 0xc7, 0x60, 0x70, 0x52, 0xb4, 0x8d, 0x21, 0xac, 0x81, 0x27, 0xbb };
            var input = new byte[] { 0xcc, 0xa8, 0x81, 0xf2, 0x94, 0xef, 0xcc, 0xfc, 0xc3, 0x49, 0x3c, 0xe5, 0xa3, 0x33, 0x35, 0x34, 0xd7, 0x9a, 0x60, 0xd8, 0x67, 0x5d, 0x51, 0x32, 0xe9, 0x2d, 0x53, 0xa5, 0x35, 0xaa, 0xfc, 0x42, 0xe3, 0x11, 0xed, 0x5b, 0x3a, 0xa4, 0x68, 0x4a, 0x73, 0x55, 0xed, 0x70, 0x8b, 0x7a, 0xcc, 0x1f, 0x7e, 0x58, 0x4a, 0x12, 0x20, 0x4f, 0x53, 0x6f, 0x56, 0x4f, 0x08, 0x66, 0x9b, 0x26, 0xc6, 0x18, 0x4d, 0xfa, 0x01, 0x92, 0x45, 0xda, 0xfa, 0x32, 0x32, 0x16, 0x65, 0x12, 0x70, 0xe0, 0xa6, 0x6f };
            var correctEncoding = new byte[] { 0x3d, 0x7f, 0x38, 0x4e, 0x05, 0x72, 0xfa, 0x81, 0x64, 0x29, 0xa5, 0xa2, 0x72, 0x6f, 0x93, 0x9d, 0x7d, 0xd6, 0x12, 0x3d, 0xb9, 0xad, 0x7c, 0x61, 0xb1, 0xf3, 0xd0, 0xdb, 0xdb, 0xc0, 0x65, 0xe4, 0x58, 0x75, 0x70, 0x27, 0xdd, 0x65, 0x33, 0xe9, 0xf6, 0x1e, 0x4e, 0xb9, 0x15, 0x3c, 0x16, 0x7d, 0x3d, 0x6c, 0xde, 0x17, 0x0e, 0x85, 0xbc, 0x9c, 0x68, 0xec, 0xad, 0xc7, 0x45, 0x29, 0xf1, 0xf9, 0x22, 0x70, 0xd9, 0xe0, 0x62, 0x9f, 0x32, 0xf1, 0x71, 0xd6, 0x3e, 0x39, 0xa6, 0xdd, 0xf7, 0xca };

            var encodedResult = new byte[input.Length];
            var decodedResult = new byte[input.Length];

            var cipher = new Renci.SshClient.Security.Cryptography.Aes(128);
            cipher.Mode = System.Security.Cryptography.CipherMode.CBC;
            cipher.Padding = System.Security.Cryptography.PaddingMode.None;
            var enc = cipher.CreateEncryptor(key, iv);
            enc.TransformBlock(input, 0, input.Length, encodedResult, 0);

            var dec = cipher.CreateDecryptor(key, iv);
            dec.TransformBlock(encodedResult, 0, encodedResult.Length, decodedResult, 0);

            Assert.IsTrue(encodedResult.IsEqualTo(correctEncoding));
            Assert.IsTrue(decodedResult.IsEqualTo(input));
        }

        [TestMethod]
        public void Test_AES_192_CBC_NoPadding()
        {
            var key = new byte[] { 0xd8, 0xab, 0x36, 0x37, 0x10, 0x20, 0xec, 0x98, 0x90, 0x56, 0xc1, 0x9e, 0xbe, 0x6c, 0x32, 0xc5, 0x77, 0x73, 0x74, 0xee, 0xb5, 0x43, 0xd4, 0x18 };
            var iv = new byte[] { 0x3a, 0x3f, 0x51, 0xb1, 0xba, 0xc7, 0x60, 0x70, 0x52, 0xb4, 0x8d, 0x21, 0xac, 0x81, 0x27, 0xbb };
            var input = new byte[] { 0xcc, 0xa8, 0x81, 0xf2, 0x94, 0xef, 0xcc, 0xfc, 0xc3, 0x49, 0x3c, 0xe5, 0xa3, 0x33, 0x35, 0x34, 0xd7, 0x9a, 0x60, 0xd8, 0x67, 0x5d, 0x51, 0x32, 0xe9, 0x2d, 0x53, 0xa5, 0x35, 0xaa, 0xfc, 0x42, 0xe3, 0x11, 0xed, 0x5b, 0x3a, 0xa4, 0x68, 0x4a, 0x73, 0x55, 0xed, 0x70, 0x8b, 0x7a, 0xcc, 0x1f, 0x7e, 0x58, 0x4a, 0x12, 0x20, 0x4f, 0x53, 0x6f, 0x56, 0x4f, 0x08, 0x66, 0x9b, 0x26, 0xc6, 0x18, 0x4d, 0xfa, 0x01, 0x92, 0x45, 0xda, 0xfa, 0x32, 0x32, 0x16, 0x65, 0x12, 0x70, 0xe0, 0xa6, 0x6f };
            var correctEncoding = new byte[] { 0xa6, 0x71, 0x7e, 0xd8, 0x88, 0xb6, 0xcb, 0x2e, 0x66, 0x6c, 0xed, 0x73, 0x28, 0x19, 0xa8, 0xec, 0x24, 0x66, 0xbe, 0x61, 0xa8, 0x05, 0x6a, 0x9b, 0xe5, 0x52, 0x12, 0xd8, 0x9f, 0xe0, 0x24, 0xbc, 0x91, 0x30, 0xaa, 0x1e, 0x35, 0x00, 0x5f, 0x1a, 0xbf, 0x8c, 0x33, 0xff, 0xc0, 0x3d, 0x93, 0x9f, 0x9b, 0xb6, 0x87, 0x63, 0x55, 0x34, 0xc1, 0xdf, 0xa8, 0x75, 0x9f, 0x41, 0x01, 0xc5, 0xda, 0xae, 0x1f, 0xda, 0x3d, 0x59, 0x78, 0x50, 0xee, 0xc5, 0x64, 0xcb, 0xde, 0x5c, 0xca, 0x67, 0xe1, 0x41 };

            var encodedResult = new byte[input.Length];
            var decodedResult = new byte[input.Length];

            var cipher = new Renci.SshClient.Security.Cryptography.Aes(192);
            cipher.Mode = System.Security.Cryptography.CipherMode.CBC;
            cipher.Padding = System.Security.Cryptography.PaddingMode.None;
            var enc = cipher.CreateEncryptor(key, iv);
            enc.TransformBlock(input, 0, input.Length, encodedResult, 0);

            var dec = cipher.CreateDecryptor(key, iv);
            dec.TransformBlock(encodedResult, 0, encodedResult.Length, decodedResult, 0);

            Assert.IsTrue(encodedResult.IsEqualTo(correctEncoding));
            Assert.IsTrue(decodedResult.IsEqualTo(input));
        }

        [TestMethod]
        public void Test_AES_256_CBC_NoPadding()
        {
            var key = new byte[] { 0x81, 0xb3, 0xd3, 0x28, 0x20, 0x0b, 0x27, 0x47, 0xdc, 0x46, 0x6e, 0xee, 0xbb, 0x48, 0xac, 0xc7, 0xee, 0x2e, 0x45, 0xec, 0xb8, 0xd6, 0x7e, 0xfb, 0x03, 0xc9, 0x9b, 0x74, 0x7b, 0x17, 0xf7, 0x0a };
            var iv = new byte[] { 0x3a, 0x3f, 0x51, 0xb1, 0xba, 0xc7, 0x60, 0x70, 0x52, 0xb4, 0x8d, 0x21, 0xac, 0x81, 0x27, 0xbb };
            var input = new byte[] { 0xcc, 0xa8, 0x81, 0xf2, 0x94, 0xef, 0xcc, 0xfc, 0xc3, 0x49, 0x3c, 0xe5, 0xa3, 0x33, 0x35, 0x34, 0xd7, 0x9a, 0x60, 0xd8, 0x67, 0x5d, 0x51, 0x32, 0xe9, 0x2d, 0x53, 0xa5, 0x35, 0xaa, 0xfc, 0x42, 0xe3, 0x11, 0xed, 0x5b, 0x3a, 0xa4, 0x68, 0x4a, 0x73, 0x55, 0xed, 0x70, 0x8b, 0x7a, 0xcc, 0x1f, 0x7e, 0x58, 0x4a, 0x12, 0x20, 0x4f, 0x53, 0x6f, 0x56, 0x4f, 0x08, 0x66, 0x9b, 0x26, 0xc6, 0x18, 0x4d, 0xfa, 0x01, 0x92, 0x45, 0xda, 0xfa, 0x32, 0x32, 0x16, 0x65, 0x12, 0x70, 0xe0, 0xa6, 0x6f };
            var correctEncoding = new byte[] { 0xf8, 0x32, 0x01, 0x59, 0xe1, 0x38, 0xc3, 0x9e, 0x73, 0x13, 0x09, 0x0f, 0x01, 0x14, 0x1e, 0xfd, 0x70, 0x77, 0x96, 0xcb, 0xcc, 0x9d, 0x8e, 0x5c, 0xda, 0x10, 0x3c, 0x7d, 0x8f, 0x31, 0x01, 0x92, 0x50, 0x17, 0x11, 0x22, 0x46, 0xff, 0xf3, 0xef, 0x2d, 0xbd, 0xbf, 0xb1, 0xe0, 0x15, 0xcc, 0xf1, 0xf4, 0x59, 0x00, 0x82, 0x0e, 0x4b, 0xcc, 0x0a, 0xcc, 0x67, 0xd8, 0xec, 0x8c, 0xe6, 0x40, 0x86, 0xc6, 0x8b, 0xbb, 0xea, 0x2f, 0x98, 0x79, 0x28, 0x91, 0x6e, 0x87, 0x84, 0xdc, 0x3f, 0xa7, 0xf6};

            var encodedResult = new byte[input.Length];
            var decodedResult = new byte[input.Length];

            var cipher = new Renci.SshClient.Security.Cryptography.Aes(256);
            cipher.Mode = System.Security.Cryptography.CipherMode.CBC;
            cipher.Padding = System.Security.Cryptography.PaddingMode.None;
            var enc = cipher.CreateEncryptor(key, iv);
            enc.TransformBlock(input, 0, input.Length, encodedResult, 0);

            var dec = cipher.CreateDecryptor(key, iv);
            dec.TransformBlock(encodedResult, 0, encodedResult.Length, decodedResult, 0);

            Assert.IsTrue(encodedResult.IsEqualTo(correctEncoding));
            Assert.IsTrue(decodedResult.IsEqualTo(input));
        }

        [TestMethod]
        public void Test_AES_128_CFB_NoPadding()
        {
            var key = new byte[] { 0xfa, 0x49, 0x9d, 0xa5, 0x59, 0xc3, 0xcc, 0xa9, 0xc3, 0x0b, 0xcd, 0xba, 0x03, 0xbc, 0x97, 0xfc };
            var iv = new byte[] { 0x3a, 0x3f, 0x51, 0xb1, 0xba, 0xc7, 0x60, 0x70, 0x52, 0xb4, 0x8d, 0x21, 0xac, 0x81, 0x27, 0xbb };
            var input = new byte[] { 0xcc, 0xa8, 0x81, 0xf2, 0x94, 0xef, 0xcc, 0xfc, 0xc3, 0x49, 0x3c, 0xe5, 0xa3, 0x33, 0x35, 0x34, 0xd7, 0x9a, 0x60, 0xd8, 0x67, 0x5d, 0x51, 0x32, 0xe9, 0x2d, 0x53, 0xa5, 0x35, 0xaa, 0xfc, 0x42, 0xe3, 0x11, 0xed, 0x5b, 0x3a, 0xa4, 0x68, 0x4a, 0x73, 0x55, 0xed, 0x70, 0x8b, 0x7a, 0xcc, 0x1f, 0x7e, 0x58, 0x4a, 0x12, 0x20, 0x4f, 0x53, 0x6f, 0x56, 0x4f, 0x08, 0x66, 0x9b, 0x26, 0xc6, 0x18, 0x4d, 0xfa, 0x01, 0x92, 0x45, 0xda, 0xfa, 0x32, 0x32, 0x16, 0x65, 0x12, 0x70, 0xe0, 0xa6, 0x6f };
            var correctEncoding = new byte[] { 0x4a, 0xd9, 0x19, 0xa4, 0x51, 0xf6, 0xdc, 0xf5, 0xfc, 0xa9, 0x6f, 0x07, 0xf2, 0xb9, 0x00, 0xbc, 0xa4, 0x44, 0x97, 0x49, 0x55, 0xce, 0xc7, 0xf4, 0xe6, 0x34, 0xf3, 0x05, 0x9a, 0x46, 0xbb, 0x58, 0x6c, 0x06, 0x99, 0xe0, 0x98, 0xfc, 0x79, 0x60, 0x73, 0xea, 0x9a, 0x7e, 0xab, 0x08, 0xbe, 0x59, 0x27, 0x72, 0x3c, 0x31, 0x36, 0xf2, 0x90, 0xb1, 0x53, 0x45, 0x9d, 0xf9, 0xf4, 0xec, 0x19, 0xae, 0x8b, 0xf5, 0x56, 0x4b, 0x59, 0x87, 0xec, 0x6f, 0x23, 0x86, 0x81, 0xeb, 0xca, 0x20, 0xe6, 0x5e};

            var encodedResult = new byte[input.Length];
            var decodedResult = new byte[input.Length];

            var cipher = new Renci.SshClient.Security.Cryptography.Aes(128);
            cipher.Mode = System.Security.Cryptography.CipherMode.CFB;
            cipher.Padding = System.Security.Cryptography.PaddingMode.None;
            var enc = cipher.CreateEncryptor(key, iv);
            enc.TransformBlock(input, 0, input.Length, encodedResult, 0);

            var dec = cipher.CreateDecryptor(key, iv);
            dec.TransformBlock(encodedResult, 0, encodedResult.Length, decodedResult, 0);

            Assert.IsTrue(encodedResult.IsEqualTo(correctEncoding));
            Assert.IsTrue(decodedResult.IsEqualTo(input));
        }

        [TestMethod]
        public void Test_AES_192_CFB_NoPadding()
        {
            var key = new byte[] { 0xd8, 0xab, 0x36, 0x37, 0x10, 0x20, 0xec, 0x98, 0x90, 0x56, 0xc1, 0x9e, 0xbe, 0x6c, 0x32, 0xc5, 0x77, 0x73, 0x74, 0xee, 0xb5, 0x43, 0xd4, 0x18 };
            var iv = new byte[] { 0x3a, 0x3f, 0x51, 0xb1, 0xba, 0xc7, 0x60, 0x70, 0x52, 0xb4, 0x8d, 0x21, 0xac, 0x81, 0x27, 0xbb };
            var input = new byte[] { 0xcc, 0xa8, 0x81, 0xf2, 0x94, 0xef, 0xcc, 0xfc, 0xc3, 0x49, 0x3c, 0xe5, 0xa3, 0x33, 0x35, 0x34, 0xd7, 0x9a, 0x60, 0xd8, 0x67, 0x5d, 0x51, 0x32, 0xe9, 0x2d, 0x53, 0xa5, 0x35, 0xaa, 0xfc, 0x42, 0xe3, 0x11, 0xed, 0x5b, 0x3a, 0xa4, 0x68, 0x4a, 0x73, 0x55, 0xed, 0x70, 0x8b, 0x7a, 0xcc, 0x1f, 0x7e, 0x58, 0x4a, 0x12, 0x20, 0x4f, 0x53, 0x6f, 0x56, 0x4f, 0x08, 0x66, 0x9b, 0x26, 0xc6, 0x18, 0x4d, 0xfa, 0x01, 0x92, 0x45, 0xda, 0xfa, 0x32, 0x32, 0x16, 0x65, 0x12, 0x70, 0xe0, 0xa6, 0x6f };
            var correctEncoding = new byte[] { 0xe4, 0x75, 0xc8, 0x82, 0x38, 0x62, 0x8c, 0x3a, 0x8c, 0xff, 0xcd, 0xf6, 0xc3, 0x55, 0xec, 0x12, 0xee, 0xb1, 0x11, 0x66, 0x10, 0x23, 0x99, 0x48, 0x51, 0x78, 0x14, 0x69, 0xbb, 0x11, 0xcf, 0x73, 0x67, 0xd6, 0x24, 0x0a, 0x1f, 0x89, 0x0a, 0x90, 0x86, 0xdc, 0x55, 0x65, 0x62, 0x06, 0x27, 0xbe, 0xbb, 0x7d, 0x67, 0x43, 0xa3, 0xd2, 0xa2, 0x65, 0x5e, 0x6b, 0x11, 0x33, 0xa1, 0x42, 0xf0, 0xa8, 0x13, 0x51, 0x83, 0xf5, 0x7d, 0x76, 0x66, 0xc4, 0xb5, 0x85, 0x06, 0x69, 0x21, 0x5b, 0x6e, 0xc3};

            var encodedResult = new byte[input.Length];
            var decodedResult = new byte[input.Length];

            var cipher = new Renci.SshClient.Security.Cryptography.Aes(128);
            cipher.Mode = System.Security.Cryptography.CipherMode.CFB;
            cipher.Padding = System.Security.Cryptography.PaddingMode.None;
            var enc = cipher.CreateEncryptor(key, iv);
            enc.TransformBlock(input, 0, input.Length, encodedResult, 0);

            var dec = cipher.CreateDecryptor(key, iv);
            dec.TransformBlock(encodedResult, 0, encodedResult.Length, decodedResult, 0);

            Assert.IsTrue(encodedResult.IsEqualTo(correctEncoding));
            Assert.IsTrue(decodedResult.IsEqualTo(input));
        }

        [TestMethod]
        public void Test_AES_256_CFB_NoPadding()
        {
            var key = new byte[] { 0x81, 0xb3, 0xd3, 0x28, 0x20, 0x0b, 0x27, 0x47, 0xdc, 0x46, 0x6e, 0xee, 0xbb, 0x48, 0xac, 0xc7, 0xee, 0x2e, 0x45, 0xec, 0xb8, 0xd6, 0x7e, 0xfb, 0x03, 0xc9, 0x9b, 0x74, 0x7b, 0x17, 0xf7, 0x0a };             
            var iv = new byte[] { 0x3a, 0x3f, 0x51, 0xb1, 0xba, 0xc7, 0x60, 0x70, 0x52, 0xb4, 0x8d, 0x21, 0xac, 0x81, 0x27, 0xbb };
            var input = new byte[] { 0xcc, 0xa8, 0x81, 0xf2, 0x94, 0xef, 0xcc, 0xfc, 0xc3, 0x49, 0x3c, 0xe5, 0xa3, 0x33, 0x35, 0x34, 0xd7, 0x9a, 0x60, 0xd8, 0x67, 0x5d, 0x51, 0x32, 0xe9, 0x2d, 0x53, 0xa5, 0x35, 0xaa, 0xfc, 0x42, 0xe3, 0x11, 0xed, 0x5b, 0x3a, 0xa4, 0x68, 0x4a, 0x73, 0x55, 0xed, 0x70, 0x8b, 0x7a, 0xcc, 0x1f, 0x7e, 0x58, 0x4a, 0x12, 0x20, 0x4f, 0x53, 0x6f, 0x56, 0x4f, 0x08, 0x66, 0x9b, 0x26, 0xc6, 0x18, 0x4d, 0xfa, 0x01, 0x92, 0x45, 0xda, 0xfa, 0x32, 0x32, 0x16, 0x65, 0x12, 0x70, 0xe0, 0xa6, 0x6f };
            var correctEncoding = new byte[] { 0xaf, 0x84, 0xc6, 0xf4, 0x6a, 0x6a, 0xe2, 0xce, 0x1d, 0x93, 0x3a, 0x03, 0x7f, 0x88, 0x3b, 0xf6, 0xec, 0xc7, 0x84, 0x7c, 0x01, 0xcd, 0x77, 0xdb, 0x60, 0xcb, 0xc7, 0xbe, 0x86, 0x69, 0xe3, 0xbc, 0x46, 0x6c, 0x73, 0xb8, 0xc3, 0x36, 0xbe, 0x0f, 0x2a, 0x15, 0xd5, 0x69, 0x10, 0xcd, 0x1f, 0x7c, 0xb8, 0x64, 0x53, 0xd2, 0xab, 0xfd, 0xf7, 0x3b, 0xde, 0xde, 0x3b, 0x12, 0x26, 0xc4, 0x7f, 0x9c, 0x30, 0xfe, 0x00, 0xbf, 0x4d, 0x0b, 0x5e, 0x3d, 0x34, 0xb9, 0x0c, 0x56, 0x7d, 0xb2, 0x4a, 0xcf};

            var encodedResult = new byte[input.Length];
            var decodedResult = new byte[input.Length];

            var cipher = new Renci.SshClient.Security.Cryptography.Aes(128);
            cipher.Mode = System.Security.Cryptography.CipherMode.CFB;
            cipher.Padding = System.Security.Cryptography.PaddingMode.None;
            var enc = cipher.CreateEncryptor(key, iv);
            enc.TransformBlock(input, 0, input.Length, encodedResult, 0);

            var dec = cipher.CreateDecryptor(key, iv);
            dec.TransformBlock(encodedResult, 0, encodedResult.Length, decodedResult, 0);

            Assert.IsTrue(encodedResult.IsEqualTo(correctEncoding));
            Assert.IsTrue(decodedResult.IsEqualTo(input));
        }


    }
}
